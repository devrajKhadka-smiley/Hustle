@page "/"
@using Hustle.Models
@using Hustle.Services
@inject ITodoServices TodoServices
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="mb-0">Task List</h3>
        <div class="d-flex align-items-center">
            <InputText @bind-Value="searchTerm" class="form-control me-2" placeholder="Search tasks..." />
            <button class="btn btn-outline-secondary btn-sm" @onclick="ResetSearch">Reset</button>
        </div>
    </div>

    <div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
        <table class="table table-striped">
            <thead class="table-dark" style="position: sticky; overflow: hidden">
                <tr>
                    <th style="width: 25%; border: 1px solid #dee2e6;">Title</th>
                    <th style="width: 30%; border: 1px solid #dee2e6;">Description</th>
                    <th style="width: 10%; border: 1px solid #dee2e6;">Priority</th>
                    <th style="width: 10%; border: 1px solid #dee2e6;">Due Date</th>
                    <th style="width: 10%; border: 1px solid #dee2e6;">Status</th>
                    <th style="width: 22%; border: 1px solid #dee2e6;">Actions</th>
                    <th style="width: 10%; border: 1px solid #dee2e6;">Pin</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in FilteredTasks)
                {
                    <tr class="@((task.IsCompleted ? "bg-light" : ""))">
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.Priority</td>
                        <td>@task.DueDate.ToShortDateString()</td>
                        <td>@(task.IsCompleted ? "Completed" : "Pending")</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => OpenEditPanel(task.Id)">
                                <i class="fa-solid fa-pencil-alt"></i>
                            </button>
                            @if (!task.IsCompleted)
                            {
                                <button class="btn btn-success btn-sm me-2" @onclick="() => MarkAsComplete(task.Id)">
                                    <i class="fa-solid fa-check"></i>
                                </button>
                            }
                            <button class="btn btn-danger btn-sm me-2" @onclick="() => DeleteTask(task.Id)">
                                <i class="fa-solid fa-trash"></i>
                            </button>
                        </td>
                        <td>
                            <button class="btn btn-sm @(!task.IsPinned ? "btn-outline-warning" : "btn-warning")"
                                    @onclick="() => TogglePin(task)">
                                <i class="fa-solid fa-thumbtack"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Edit Task Panel -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="editTaskPanel" aria-labelledby="editTaskPanelLabel">
    <div class="offcanvas-header">
        <h5 id="editTaskPanelLabel">Edit Task</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        @if (taskForEdit != null)
        {
            <EditForm Model="@taskForEdit" OnValidSubmit="HandleEditSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="title" class="form-label">Title</label>
                    <InputText id="title" class="form-control" @bind-Value="taskForEdit.Title" />
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputText id="description" class="form-control" @bind-Value="taskForEdit.Description" />
                </div>

                <div class="mb-3">
                    <label for="dueDate" class="form-label">Due Date</label>
                    <InputDate id="dueDate" class="form-control" @bind-Value="taskForEdit.DueDate" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Priority</label>
                    <InputSelect @bind-Value="taskForEdit.Priority" class="form-control">
                        <option value="0">Low</option>
                        <option value="1">Medium</option>
                        <option value="2">High</option>
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label class="form-label">Status</label>
                    <InputCheckbox id="isCompleted" class="form-check-input" @bind-Value="taskForEdit.IsCompleted" />
                </div>

                <button type="submit" class="btn btn-primary">Save Changes</button>
            </EditForm>
        }
    </div>
</div>

<!-- Add Task Panel -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="addTaskPanel" aria-labelledby="addTaskPanelLabel">
    <div class="offcanvas-header">
        <h5 id="addTaskPanelLabel">Add Task</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <EditForm Model="@newTask" OnValidSubmit="HandleAddTaskSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="title" class="form-label">Title</label>
                <InputText id="title" class="form-control" @bind-Value="newTask.Title" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputText id="description" class="form-control" @bind-Value="newTask.Description" />
            </div>

            <div class="mb-3">
                <label for="dueDate" class="form-label">Due Date</label>
                <InputDate id="dueDate" class="form-control" @bind-Value="newTask.DueDate" />
            </div>

            <div class="mb-3">
                <label class="form-label">Priority</label>
                <InputSelect @bind-Value="newTask.Priority" class="form-control">
                    <option value="0">Low</option>
                    <option value="1">Medium</option>
                    <option value="2">High</option>
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary">Add Task</button>
        </EditForm>
    </div>
</div>

@code {
    private List<TodoItems> tasks = new List<TodoItems>();
    private TodoItems taskForEdit = null;
    private TodoItems newTask = new TodoItems();
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        tasks = await TodoServices.LoadTodoAsync();
        SortTasksByDueDate();
    }

    private IEnumerable<TodoItems> FilteredTasks =>
        tasks.Where(task => string.IsNullOrEmpty(searchTerm) ||
                            task.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            task.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private async Task OpenEditPanel(Guid taskId)
    {
        taskForEdit = tasks.FirstOrDefault(t => t.Id == taskId);
        if (taskForEdit != null)
        {
            await JSRuntime.InvokeVoidAsync("eval", "$('#editTaskPanel').offcanvas('show')");
        }
    }

    private async Task OpenAddTaskPanel()
    {
        newTask = new TodoItems();
        await JSRuntime.InvokeVoidAsync("eval", "$('#addTaskPanel').offcanvas('show')");
    }

    private async Task HandleEditSubmit()
    {
        if (taskForEdit != null)
        {
            await TodoServices.UpdateTodoAsync(taskForEdit);
            taskForEdit = null;
            tasks = await TodoServices.LoadTodoAsync();
            SortTasksByDueDate();
            await JSRuntime.InvokeVoidAsync("eval", "$('#editTaskPanel').offcanvas('hide')");
        }
    }

    private async Task HandleAddTaskSubmit()
    {
        if (newTask != null)
        {
            await TodoServices.SaveTodoAsync(newTask);
            tasks = await TodoServices.LoadTodoAsync();
            SortTasksByDueDate();
            await JSRuntime.InvokeVoidAsync("eval", "$('#addTaskPanel').offcanvas('hide')");
        }
    }

    private async Task MarkAsComplete(Guid taskId)
    {
        var task = tasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            task.IsCompleted = true;
            await TodoServices.UpdateTodoAsync(task);
            tasks = await TodoServices.LoadTodoAsync();
            SortTasksByDueDate();
        }
    }

    private async Task DeleteTask(Guid taskId)
    {
        var task = tasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            await TodoServices.DeleteTodoAsync(task);
            tasks = await TodoServices.LoadTodoAsync();
            SortTasksByDueDate();
        }
    }

    private async Task TogglePin(TodoItems task)
    {
        task.IsPinned = !task.IsPinned;
        await TodoServices.UpdateTodoAsync(task);
        tasks = await TodoServices.LoadTodoAsync();
        SortTasksByDueDate();
    }

    private void SortTasksByDueDate()
    {
        tasks = tasks
            .OrderBy(t => t.IsCompleted)
            .ThenBy(t => t.DueDate)
            .ThenByDescending(t => t.IsPinned)
            .ToList();
    }

    private void ResetSearch()
    {
        searchTerm = string.Empty;
    }
}
